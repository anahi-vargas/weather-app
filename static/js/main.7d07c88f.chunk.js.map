{"version":3,"sources":["components/ForecastCard.js","App.js","index.js"],"names":["ForecastCard","props","className","forecast","day","src","icon","alt","max_temp","min_temp","api","process","App","date","Date","getDay","days","useState","query","setQuery","weather","setWeather","setForecast","loading","setLoading","search","evt","a","key","fetch","weatherResponse","json","weatherData","console","log","coord","lat","lon","forecastResponse","forecastData","alert","type","placeholder","onChange","e","target","value","onKeyPress","name","sys","country","String","slice","description","Math","round","main","temp","temp_max","temp_min","daily","map","item","index","max","min","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAaeA,MAXf,SAAsBC,GAClB,OACI,sBAAKC,UAAWD,EAAME,SAASD,UAA/B,UACI,8BAAMD,EAAME,SAASC,MACrB,8BAAK,qBAAKC,IAAG,2CAAsCJ,EAAME,SAASG,KAArD,WAAoEC,IAAI,mBACrF,yCAAYN,EAAME,SAASK,SAA3B,UACA,wCAAWP,EAAME,SAASM,SAA1B,cCLNC,EACCC,mCADDD,EAEEC,2CAuEOC,MApEf,WAEE,IAAMC,EAAQ,IAAIC,KACZV,EAAMS,EAAKE,SACXC,EAAO,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAJ3C,EAMaC,mBAAS,IANtB,mBAMNC,EANM,KAMCC,EAND,OAOiBF,mBAAS,IAP1B,mBAONG,EAPM,KAOGC,EAPH,OAQmBJ,mBAAS,IAR5B,mBAQNd,EARM,KAQImB,EARJ,OASiBL,oBAAS,GAT1B,mBASNM,EATM,KASGC,EATH,KAWPC,EAAM,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,yDACG,UAAZD,EAAIE,IADK,0CAGmBC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBQ,EAAzB,oCAA0DR,IAHlF,cAGLoB,EAHK,gBAIeA,EAAgBC,OAJ/B,cAILC,EAJK,OAKXX,EAAWW,GACXC,QAAQC,IAAIF,GAND,UAQoBH,MAAM,GAAD,OAAInB,EAAJ,uBAA2BsB,EAAYG,MAAMC,IAA7C,gBAAwDJ,EAAYG,MAAME,IAA1E,gEAAqI3B,IAR9J,eAQL4B,EARK,iBASgBA,EAAiBP,OATjC,QASLQ,EATK,OAUXjB,EAAYiB,GACZpB,EAAS,IACTK,GAAW,GAZA,kDAcTgB,MAAM,wBAdG,0DAAH,sDAmBZ,OACE,qBAAKtC,UAAU,MAAf,SACE,iCACE,qBAAKA,UAAU,aAAf,SACA,uBAAOuC,KAAK,OAAOvC,UAAU,aAAawC,YAAY,mBACtDC,SAAU,SAAAC,GAAC,OAAIzB,EAASyB,EAAEC,OAAOC,QACjCA,MAAO5B,EACP6B,WAAYtB,MAGTF,EAsBE,qBAAKrB,UAAU,QAAf,uBArBH,gCACE,sBAAKA,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BkB,EAAQ4B,KAAnC,KAA2C5B,EAAQ6B,IAAIC,WACvD,qBAAKhD,UAAU,OAAf,SAAuBiD,OAAOtC,GAAMuC,MAAM,EAAE,SAE9C,sBAAKlD,UAAU,cAAf,UACE,qBAAKA,UAAU,UAAf,SAA0BkB,EAAQA,QAAQ,GAAGiC,cAC7C,qBAAKnD,UAAU,OAAf,mBAA0BoD,KAAKC,MAAMnC,EAAQoC,KAAKC,MAAlD,UACA,mDAAeH,KAAKC,MAAMnC,EAAQoC,KAAKE,UAAvC,WACA,kDAAcJ,KAAKC,MAAMnC,EAAQoC,KAAKG,UAAtC,cAGF,qBAAKzD,UAAU,eAAf,SAEG,CAACC,GAAU,GAAGyD,MAAMR,MAAM,EAAE,GAAGS,KAAI,SAACC,EAAMC,GAAP,OAElC,aAFmD,CAElD,EAAD,CAA0B5D,SAAU,CAAED,UAAW,WAAYE,IAAKY,GAAM+C,EAAM3D,EAAI,GAAG,GAAIE,KAAK,GAAD,OAAKwD,EAAK1C,QAAQ,GAAGd,MAClHE,SAAS,GAAD,OAAK8C,KAAKC,MAAMO,EAAKL,KAAKO,MAAQvD,SAAS,GAAD,OAAK6C,KAAKC,MAAMO,EAAKL,KAAKQ,QADzDF,iBC5DnCG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7d07c88f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction ForecastCard(props) {\r\n    return (\r\n        <div className={props.forecast.className}>\r\n            <div>{props.forecast.day}</div>\r\n            <div><img src={`http://openweathermap.org/img/wn/${props.forecast.icon}@2x.png`} alt=\"weather icon\" /></div>\r\n            <div>High: {props.forecast.max_temp}°</div>\r\n            <div>Low: {props.forecast.min_temp}°</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ForecastCard","import React, { useState } from \"react\"\nimport ForecastCard from \"./components/ForecastCard\"\n\nconst api = {\n  key: process.env.REACT_APP_API_KEY,\n  base: process.env.REACT_APP_API_BASE_URL\n}\n\nfunction App() {\n\n  const date =  new Date()\n  const day = date.getDay()\n  const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const [forecast, setForecast] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  const search = async(evt) => {\n    if (evt.key === \"Enter\") {\n      try {\n      const weatherResponse = await fetch(`${api.base}weather?q=${query},us&units=imperial&APPID=${api.key}`)\n      const weatherData = await weatherResponse.json()\n      setWeather(weatherData)\n      console.log(weatherData)\n\n      const forecastResponse = await fetch(`${api.base}onecall?lat=${weatherData.coord.lat}&lon=${weatherData.coord.lon}&units=imperial&exclude=minutely,hourly,alerts&APPID=${api.key}`)\n      const forecastData = await forecastResponse.json()\n      setForecast(forecastData)\n      setQuery('')\n      setLoading(false);\n      } catch (err) {\n        alert(\"Error: Invalid Input\") // update error handling\n      }\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <main>\n        <div className=\"search-box\">\n        <input type=\"text\" className=\"search-bar\" placeholder=\"City or ZIP Code\"\n        onChange={e => setQuery(e.target.value)}\n        value={query}\n        onKeyPress={search}\n        />\n        </div>\n        {(!loading) ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n              <div className=\"date\">{String(date).slice(0,15)}</div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"weather\">{weather.weather[0].description}</div>\n              <div className=\"temp\">{`${Math.round(weather.main.temp)}°`}</div>  \n              <div>High: {`${Math.round(weather.main.temp_max)}°`}</div>\n              <div>Low: {`${Math.round(weather.main.temp_min)}°`}</div>\n            </div>\n            \n            <div className=\"forecast-box\">\n              {/* use slice to limit # of map items */}\n              {[forecast][0].daily.slice(0,6).map((item, index) => // (index+day+1)%7 - add day to index to begin from curr day, \n                                                                   // add 1 to exclude curr day, modulo when it is 7 to return to start of array \n                <ForecastCard key={index} forecast={{ className: \"forecast\", day: days[(index+day+1)%7], icon: `${item.weather[0].icon}`, \n                max_temp: `${Math.round(item.temp.max)}`, min_temp: `${Math.round(item.temp.min)}`}}/>\n              )}\n            </div>\n        </div>\n        ) : (<div className=\"error\">Not Found</div>)}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}